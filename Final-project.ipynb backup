{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Exploratory-data-analysis\" data-toc-modified-id=\"Exploratory-data-analysis-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Exploratory data analysis</a></span><ul class=\"toc-item\"><li><span><a href=\"#Null-value-exploratory\" data-toc-modified-id=\"Null-value-exploratory-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;</span>Null value exploratory</a></span></li><li><span><a href=\"#Extract-histogram-features\" data-toc-modified-id=\"Extract-histogram-features-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;</span>Extract histogram features</a></span></li></ul></li><li><span><a href=\"#Data-Preprocessing\" data-toc-modified-id=\"Data-Preprocessing-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Data Preprocessing</a></span><ul class=\"toc-item\"><li><span><a href=\"#Drop-null-values\" data-toc-modified-id=\"Drop-null-values-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;</span>Drop null values</a></span></li><li><span><a href=\"#Fill-null-values-with-mean-and-create-null-indicator-features\" data-toc-modified-id=\"Fill-null-values-with-mean-and-create-null-indicator-features-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;</span>Fill null values with mean and create null indicator features</a></span></li><li><span><a href=\"#Convert-to-proper-dtypes\" data-toc-modified-id=\"Convert-to-proper-dtypes-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;</span>Convert to proper dtypes</a></span></li><li><span><a href=\"#Save-preprocessed-data\" data-toc-modified-id=\"Save-preprocessed-data-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;</span>Save preprocessed data</a></span></li></ul></li><li><span><a href=\"#Modeling\" data-toc-modified-id=\"Modeling-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Modeling</a></span></li></ul></div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import Counter\n",
    "from sklearn.impute import SimpleImputer\n",
    "from pyautomodel import utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>.container { width:90% !important; }</style>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.set_option(\"display.max_columns\", None)\n",
    "pd.set_option(\"display.max_rows\", 20)\n",
    "from IPython.core.display import display, HTML\n",
    "display(HTML(\"<style>.container { width:90% !important; }</style>\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "## load dataset\n",
    "data = pd.read_csv('./aps_failure_training_set.csv')\n",
    "target = data['class']\n",
    "data = data.drop('class', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory data analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Null value exploratory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## null value statistics by columns and by rows\n",
    "_ = data.isnull()\n",
    "null_stats_row = _.sum(axis=1) / data.shape[1]\n",
    "null_stats_col = _.sum(axis=0) / data.shape[0]\n",
    "\n",
    "# plot the null statistics\n",
    "f, axs = plt.subplots(1, 2, figsize=(16, 5))\n",
    "sns.distplot(null_stats_row, ax=axs[0], bins=30, axlabel= 'feature null ratio', label='null stats by feature').legend()\n",
    "sns.distplot(null_stats_col, ax=axs[1], bins=30, axlabel='sample null ratio', label='null stats by sample').legend()\n",
    "axs[0].set_title('null stats by features')\n",
    "axs[1].set_title('null stats by samples')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Comment:\n",
    "    From the 'null stats by features' plot, we can found that most of features have low null ratio, i.e. less than 0.2, so we choose 0.2 as the threshold to drop these features with null ratio geater than 0.2.\n",
    "    From the 'null stats by samples' plot, we can found that most of samples have low null ratio, i.e. less than 0.4, so we choose 0.4 as the threshold to drop these samples with null ratio greater than 0.4.`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract histogram features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "## There are some features are derived from original attributes.\n",
    "## E.g. features 'ee_000, ee_001, ee_002, ee_003, ee_004, ee_005, ee_006, ee_007, ee_008, ee_009' were derived from original attribute 'ee' by applying histogram to bin it.\n",
    "## I.e., let's say there are N_i values in that original attribute 'ee' of a sample_i (other samples may have different number of values, i.e. N_j may be differ from N_i), \n",
    "## there is a count n_0 of values that fall into range 'ee_000', a count n_1 of values that fall into range 'ee_001' and so on,\n",
    "## then assign n_0 to feature 'ee_000', assign n_1 to feature 'ee_001' and so on.\n",
    "## So, if we apply argmax('ee000, ..., ee009'), then we can get the bin the original attribute 'ee' is falls into most frequently, \n",
    "## we use it as a new feature and vice versa (i.e. argmin('ee000, ..., ee009'))\n",
    "original_attrs = [attr for attr, count in Counter([col[:2] for col in data.columns]).items() if count > 1]\n",
    "for attr in original_attrs:\n",
    "    data[f'{attr}_max'] = data.filter(regex=f\"^{attr}_[0-9]*$\").apply(lambda row: np.nanargmax(row) if not np.isnan(row).any() else np.NaN, \n",
    "                                                                      axis=1, raw=True, result_type='reduce')\n",
    "    data[f'{attr}_min'] = data.filter(regex=f\"^{attr}_[0-9]*$\").apply(lambda row: np.nanargmin(row) if not np.isnan(row).any() else np.NaN, \n",
    "                                                                      axis=1, raw=True, result_type='reduce')\n",
    "## normalize the histogram features\n",
    "for attr in original_attrs:\n",
    "    _df = data.filter(regex=f\"^{attr}_[0-9]*$\").apply(lambda row: row / np.nansum(row) if not np.nansum(row) == 0 else [0] * len(row), \n",
    "                                                      axis=1, raw=True, result_type='expand').add_suffix('_norm')\n",
    "    data = pd.concat([data, _df], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Drop null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "## drop features and columns by threshold\n",
    "# use 0.4 as feature null stats threshold to drop features\n",
    "# use 0.2 as sample null stats threshold to drop samples\n",
    "THRESHOLD_COL = 0.2\n",
    "THRESHOLD_ROW = 0.4\n",
    "drop_features = null_stats_col.index[null_stats_col > THRESHOLD_COL]\n",
    "drop_samples = null_stats_row.index[null_stats_row > THRESHOLD_ROW]\n",
    "data.drop(drop_features, axis=1, inplace=True)\n",
    "data.drop(drop_samples, axis=0, inplace=True)\n",
    "target.drop(drop_samples, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fill null values with mean and create null indicator features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "## fill null values with mean strategy, and create null value indicator features\n",
    "imp_mean = SimpleImputer(missing_values=np.NaN, strategy='mean', add_indicator=True).fit(data)\n",
    "data = pd.DataFrame(imp_mean.transform(data), columns=data.columns.to_list() + (data.columns[imp_mean.indicator_.features_] + '_null_indic').to_list())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert to proper dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "## convert float dtype columns with only integers to int dtype\n",
    "# NOTE: make sure there is no NaN value\n",
    "for col in data.columns:\n",
    "    if data[col].apply(float.is_integer, convert_dtype=False).all():\n",
    "        data[col] = data[col].astype(np.int)\n",
    "# reduce memory usage\n",
    "data = utils.reduce_mem_usage(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save preprocessed data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.to_pickle('./preprc_data.pkl')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
